; Parameters
; ----------
;
; sFormat       - Password format. Can contain strings:
;                 A - An upper case English letter
;                 a - a lower case English letter
;                 C - An upper case English consonant - does not include "Y" by default
;                 c - A lower case English consonant - does not include "y" by default
;                 n - a numeric digit
;                 p - a punctuation char (non-alpha character such as +.,:)
;                 V - An upper case English vowel - includes "Y" by default
;                 v - A lower case English vowel - includes "y" by default
;                 x - any of the above
;
;                     Each character may be preceded with a number to specify the
;                     minimum count of each type to appear for example "2A5n" is two uppercase letters
;                     and five numerics.  If the total minimum count
;                     is shorter than the password length then the password with be padded
;                     with characters from random categories.
;
;                     Each character may be preceeded with a "-" to mean "don't include this category.
;                     This is useful to restrict the characters in the "x" category, for example
;                     "10x-s-p-A" would mean ten random characters but not special, parameter or
;                     upper case.  By default this would mean ten lower case or numeric digits.
;
; iMaxLength    - Maximum password length, default is same length as format. When the maximum length is
;                 larger than the format length then the password length is randomly set between the two
;
; iFixedLength  - The number of characters in the format which are fixed in position.
;                 A mask of "Aaaannn" with a fixed length of 1 would give you results like
;                 Xl3pr37 or G23isi9 where the first character is always an upper case letter,
;                 and the rest of the password would comprise 3 lower case letters and three
;                 numerics in any order.
;                 If you want the the password to exactly match the format then set the fixed
;                 length to be the same as the format length
;
; $sUserAccount - This is the login name of the user.  It is used to remove the matching characters
;                 from the possible set of those used to generate the password.  This is a cheap way
;                 of ensuring that the password will be fit for strong password requirements.
;                 For example, passing "jdoe" as the user account will ensure that the characters
;                 "dejo" and "DEJO" are not present in the password.  You could also use this field to
;                 remove characters which are commonly confused like "LIJ10" or those that change position
;                 on some keyboards in different languages like '@"|\?' and so-on.
;
; $sUserFullName- This is used to reject passwords that match the first three letters in any word of
;                 the users password.  For example, "Smith, David" would reject any password which has
;                 the strings "smi" or "dav" anywhere in it.  As with $sUserAccount it doesn't nev to be
;                 a real user name and you can use it as a ban list to remove (for example) English short
;                 months i.e. "jan,feb,mar,...".  Only the first three letters are used as this is the
;                 requirement for strong windows passwords.
 
; Note, "special" characters are not supported.  These are usually "extended ASCII" or Unicode
; characters and due to the difficulty of consistently being able to type them on different
; keyboards I have not used them
;
; If you want support for these, just add an "s" category to the array and list the special
; characters that you want to use.  You can then use "s" in your format, and the special
; characters will automatically be included in the "x" category
 
; ***********
; * WARNING * You must seed the random number generator before calling this function!
; *********** This is by design to allow the function to be used to generate predictable passwords
;             if required.
 
; Examples:
;	$sPass=udfPassword()
;		Generates the default password which is fixed length in the format Cvcvvnnn e.g. Nytya080, Wusye403
;
;       $sPass=udfPassword("Anp2x",10,2)
;		Generates a password of between 5 and 10 characters starting with an upper case letter and a single numeric.
;               There must be a punctuation character somewhere in the password but the position is not fixed.
;
;       $sPass=udfPassword("Anp2x",10,2,"tricky")
;		As the last example, except that none of the letters TRICKY or tricky will be used in the password.
;
;       $sPass=udfPassword("Anp2x",10,2,"","howarth, richard")
;		The substrings "ric" and "how" cannot appear anywhere in the password.
;
;	$sPass=udfPassword("A9x-A-s-p",10,1)
;		First letter is upper case, remaining 9 are random but must not include upper case, special or punctuation.
 
 
Function udfPassword(Optional $sFormat, Optional $iMaxLength, Optional $iFixedLength, Optional $sUserAccount, Optional $sUserFullName)
 
	Dim $iError           $iError=0
	Dim $iIndex           $iIndex=0
	Dim $sMask            $sMask=""
	Dim $iCounter         $iCounter=0
	; Note, "Y" is considered a vowel for the purposes of generating passowrds.
	; If you don't like this then move it from the V category to the C category.
	Dim $asCategories     $asCategories="CBCDFGHJKLMNPQRSTVWXZ",
	                                    "VAEIOUY",
					    "n1234567890",
					    "p,.<>/?:;@@'~#{[}]-=!£$$%%^&*()"+'"',
	                                    "c",
					    "v",
					    "A",
					    "a",
					    "x"
	Dim $sCategories      $sCategories=""
	Dim $sLastUsed
	Dim $sCategory,$sAllCategories
 
	If Left($sFormat,1)="!"
		$sFormat=SubStr($sFormat,2)
	Else
		Dim $sString,$cChar,$sCase
		While $udfPassword="" AND $iERROR=0
			$sString=0
			$sCase=SetOption("CaseSensitivity","ON")
			$udfPassword=udfPassword("!"+$sFormat,$iMaxLength,$iFixedLength,$sUserAccount,$sUserFullName)
			$iERROR=@ERROR
			If Not @ERROR
				$sCase=SetOption("CaseSensitivity","OFF")
				$sString=""
				; Check that no significant part of the user name is in the password
				For $iIndex= 1 To Len($sUserFullName)
					$cChar=SubStr($sUserFullName,$iIndex,1)
					If ($cChar>='A' AND $cChar <= 'Z') OR $cChar>='a' AND $cChar<='z'
						$sString=$sString+$cChar
						If Len($sString)=3 AND InStr($udfPassword,$sString) $udfPassword="" EndIf
					Else
						$sString=""
					EndIf
				Next
			EndIf
			$sString=SetOption("CaseSensitivity",$sCase)
		Loop
		Exit $iERROR
	EndIf
 
	$udfPassword=""
	$iMaxLength=Val($iMaxLength)
	$iFixedLength=Val($iFixedLength)
 
	If $sFormat="" $sFormat="Cvcvvnnn" $iFixedLength=Len($sFormat) EndIf
 
	; Build categories from atoms
	For $iCounter=0 to UBound($asCategories)
		$sCategory=Left($asCategories[$iCounter],1)
		$sCategories=$sCategories+$sCategory
		$asCategories[$iCounter]=SubStr($asCategories[$iCounter],2)
		Select
		Case $sCategory='A' ; Build alphabet from consonants and vowels
			$asCategories[$iCounter]=$asCategories[InStr($sCategories,"C")-1]+$asCategories[InStr($sCategories,"V")-1]
		Case $sCategory='c' OR $sCategory='v' OR $sCategory='a' ; Copy upper case versions
			$asCategories[$iCounter]=LCase($asCategories[InStr($sCategories,UCase($sCategory))-1])
		Case $sCategory='x'
			$asCategories[$iCounter]=$sAllCategories
		EndSelect
		If Not InStr($sAllCategories,Left($asCategories[$iCounter],1)) $sAllCategories=$sAllCategories+$asCategories[$iCounter] EndIf
	Next
 
	; If there is a user account, strip the characters from the possibles
	; It's a cheap way to ensure that the user account is not present in the final password.
	While $sUserAccount
		For $iCounter=0 to UBound($asCategories)
			$asCategories[$iCounter]=Join(Split($asCategories[$iCounter],LCase(Left($sUserAccount,1))),"")
			$asCategories[$iCounter]=Join(Split($asCategories[$iCounter],UCase(Left($sUserAccount,1))),"")
		Next
		$sUserAccount=Join(Split($sUserAccount,Left($sUserAccount,1)),"")
	Loop
 
	; Expand mask
	While $sFormat<>""
		; Get count for this type
		$iCounter=Val($sFormat)
		If $iCounter<1 $iCounter=1 EndIf
		; Strip count from string
		While InStr($asCategories[InStr($sCategories,"n")-1],Left($sFormat,1)) $sFormat=SubStr($sFormat,2) Loop
		; Strip categories from catch-all category
		If Left($sFormat,1)='-'
			$iIndex=InStr($sCategories,SubStr($sFormat,2,1))
			If $iIndex
				$asCategories[InStr($sCategories,"x")-1]=Join(Split($asCategories[InStr($sCategories,"x")-1],$asCategories[$iIndex-1]),"")
			EndIf
			$sFormat=SubStr($sFormat,3)
		Else
			$iIndex=InStr($sCategories,Left($sFormat,1))
			If Not $iIndex $iError=1216 EndIf
			While $iCounter $sMask=$sMask+CStr($iIndex-1) $iCounter=$iCounter-1 Loop
			$sFormat=SubStr($sFormat,2)
		EndIf
	Loop
 
	If $iMaxLength<Len($sMask) $iMaxLength=Len($sMask) EndIf
 
	; Determine actual password length
	If $iMaxLength>Len($sMask) $iMaxLength=RND($iMaxLength-Len($sMask))+Len($sMask) EndIf
	; Expand mask to length
	$iIndex=InStr($sCategories,"x")
	While $iMaxLength>Len($sMask) $sMask=$sMask+CStr($iIndex-1) Loop
 
	; Create password from mask
	While $sMask<>""
		$iIndex=Val(Left($sMask,1))
		$sMask=SubStr($sMask,2)
		$sLastUsed=SubStr(Join(Split($asCategories[$iIndex],$sLastUsed),""),1+Rnd(Len(Join(Split($asCategories[$iIndex],$sLastUsed),""))-1),1)
		$sFormat=$sFormat+$sLastUsed
	Loop
 
	; Strip off fixed format section
	If $iFixedLength $udfPassword=Left($sFormat,$iFixedLength) $sFormat=SubStr($sFormat,$iFixedLength+1) EndIf
	; Now, randomize remaining places
	While Len($sFormat)>1
		$iIndex=1+Rnd(Len($sFormat)-1)
		$udfPassword=$udfPassword+SubStr($sFormat,$iIndex,1)
		$sFormat=Left($sFormat,$iIndex-1)+SubStr($sFormat,$iIndex+1)
	Loop
	$udfPassword=$udfPassword+$sFormat
 
	Exit $iError
EndFunction